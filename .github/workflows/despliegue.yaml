name: Deploy Symfony API with MySQL

on:
  push:
    branches:
      - main

env:
  MYSQL_PORT: 3306

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install dependencies
        run: composer install
        working-directory: backend

      - name: Run tests
        run: ./vendor/bin/phpunit tests
        working-directory: backend

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Install dependencies
        run: composer install
        working-directory: backend

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          # Crear directorios y permisos
          ssh $USERNAME@$HOST "mkdir -p $DEPLOY_PATH/{var,public}"

          # Sincronizar archivos excluyendo desarrollo
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.env.local' \
            --exclude='var/' \
            --exclude='tests/' \
            --exclude='phpunit.xml' \
            backend/ $USERNAME@$HOST:$DEPLOY_PATH

          # Ajustar permisos
          ssh $USERNAME@$HOST "sudo chown -R $USERNAME:www-data $DEPLOY_PATH"
          ssh $USERNAME@$HOST "sudo chmod -R 775 $DEPLOY_PATH/var"
          ssh $USERNAME@$HOST "sudo chmod -R 755 $DEPLOY_PATH/public"

          # Configurar .htaccess para Apache
          ssh $USERNAME@$HOST "echo -e '<IfModule mod_rewrite.c>\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^ index.php [QSA,L]\n</IfModule>' > $DEPLOY_PATH/public/.htaccess"

          # Habilitar módulos Apache
          ssh $USERNAME@$HOST "sudo a2enmod rewrite headers"

      - name: Setup database and run migrations
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Configurar MySQL para conexiones remotas
            sudo sed -i 's/^bind-address\s*=.*/bind-address = 0.0.0.0/' /etc/mysql/mysql.conf.d/mysqld.cnf
            sudo systemctl restart mysql

            MYSQL_ROOT_USER="root"
            MYSQL_ROOT_PASS="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            APP_DB="${{ secrets.MYSQL_DATABASE }}"
            DEPLOY_PATH="${{ secrets.DEPLOY_PATH }}"
            APP_USER="templator"
            APP_PASS="${{ secrets.MYSQL_TEMPLATOR_PASSWORD }}"

            # Crear base de datos si no existe
            mysql -u$MYSQL_ROOT_USER -p"$MYSQL_ROOT_PASS" -e "
              CREATE DATABASE IF NOT EXISTS \`$APP_DB\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
            "

            # Obtener versión de MySQL para Doctrine
            MYSQL_VERSION=$(mysql -u$MYSQL_ROOT_USER -p"$MYSQL_ROOT_PASS" -e "SELECT VERSION();" -s --skip-column-names | cut -d'-' -f1)

            # Configurar .env.local para producción
            cd "$DEPLOY_PATH"
            echo "APP_ENV=prod" > .env.local
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> .env.local
            echo "DATABASE_URL=mysql://$APP_USER:$APP_PASS@54.157.114.249:3306/$APP_DB?serverVersion=$MYSQL_VERSION&charset=utf8mb4" >> .env.local

            # Instalar dependencias y ejecutar migraciones
            composer install --no-dev --optimize-autoloader --no-interaction --no-scripts
            php bin/console cache:clear --env=prod --no-debug
            php bin/console cache:warmup --env=prod --no-debug
            php bin/console doctrine:migrations:migrate --no-interaction --env=prod
            php bin/console assets:install public --env=prod --no-debug

            # Reiniciar Apache para aplicar cambios
            sudo systemctl restart apache2
